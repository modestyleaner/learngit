git 学习地址：
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000

http://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E8%8E%B7%E5%8F%96%E5%B8%AE%E5%8A%A9

下面是简单的git笔记：

1 创建一个git库
   在一个合适的目录，最好没有中文字符：
     git init
	 该命令会生成一个默认隐藏的.git 文件夹，最好不要改动里面的东西
	 
2 添加文件到git仓库分2步：
   <1> git add filename
   <2> git commit -m "descriptinong about the change"
   
   
3 git 常用命令   
   git status 改命令用来查看当前的状态   
   git diff 可以查看修改了，但是并未提交的内容
   
  git log 查看历史更改记录  q 退出记录列表
  
  git reset --hard HEAD^ 退回到上次修改
				   HEAD^^ 退回到上2次修改
				   HEAD~20 退回到上20次修改
				   
				   34a32f  或者直接使用commit id 进行回退
				   
				   
  git reflog 打印了历史的命令记录，如果想要会回到最新的更改，但是commit id忘记了，可以使用该记录，进行查找
  
4 工作区和暂存区的概念

  工作区： learngit 文件夹就是一个工作区，不包含其中的.git文件夹
  版本库： .git 隐藏目录 代表git的版本库
  暂存区：  git add 后的内容会提交到暂存区
  
  
  git checkout -- filenme  可以把修改回退到为git add 状态或者 上一次的git commit 状态
  
  git reset HEAD filename  会退到加入暂存区之前的状态
  
  
4 删除文件

   当直接删除了一个文件(误删或者无用的文件)
   
   情况1： 确实要删除该文件
    <1>   git rm filename
	<2>   git commit -m 'remove file'
	
   情况2 ： 误删除
    git checkout -- filename
	 git  checkout 其实是用版本库的内容替代工作取得版本，无论工作区是修改或者删除。
	 
	 
5 远程仓库

    <1>先有了本地库，后又了远程库的时候，如何关联远程库：
	
	git remote add origin git@github.com:modestyleaner/learngit.git
	git push -u origin master  第一次关联 ，加-u ，以后就不需要了
	
	之后本地进行了修改内容，提交以后，使用：
	git push origin master 
	
	<2> 从0开始，先创建远程库，然后从远程库克隆
	  在github上创建一个新的库，勾选创建一个readme文件
	  
	  这样远程库已经准备好了，下面进行远程库的克隆：
	  git clone git@github.com:modestyleaner/gitskills.git
	  
	  注意： 远程库地址可以是ssh协议，也可以是https协议，其缺点是速度慢，而且每次推送必须
	  输入口令
	  
	  
6 分支管理

	在版本回退里，每次提交，git都把它们串成一条时间线，该时间线就是一条分支。
	目前为止，只有一条分支，在git里，该分支为主分支。即master分支。HEAD严格来说，不是
	指向提交，而是指向master，master才是只想提交的。所以HEAD指向的就是当前分支。
	
	git checkout -b dev   创建一个分支dev，并切换到dev分支上
	
	该命令即一下2条命令：
	git branch dev
	git checkout dev
	
	切换后，使用 git branch 查看当前的分支
	该命令会将所有的分支都列出来
	
	
	然后进行一些内容的更改并提交到dev分支上
	
	切换到master分支上  git checkout master
	
	发现方才更改的内容没有。
	使用 git merge dev  会将dev的内容合并到 master 分支上 ，使用的是Fast forward 模式
	
	
	
	总结分支操作：
	 查看分支： git branch 
	 创建分支： git branch <name>
	 切换分支： git checkout <name>
	 创建+切换分支： git checkout -b <name>
	 合并某分支到当前分支： git merge <name>
	 删除分支： git branch -d <name>
	
	
	  在合并过程中可能遇到冲突，则需要手动修改冲突，然后，进行提交 
	  
	
	分支策略

	在实际开发中，我们应该按照几个基本原则进行分支管理：	
	首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；	那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；	你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了
	  
7 bug分支

   当需要临时修改一个bug，但是还有缓存区的内容没有提交，此时，使用stash功能，保存现场，
   再bug修复之后，然后进行现场恢复
   
   在进行修复以后，然后使用：
    git stash list 查看工作现场是否存在
	然后使用：
	git stash apply 恢复，但是stash内容没有删除，需要使用 git stash drop 来删除
	
	或者直接使用： git stash pop  恢复的同时，删除stash内容
	
	如果有多个stash ，则可以指定恢复到具体的现场
	git stash  pop stash@{0} 
	
	
8  如果要丢弃一个没有被合并过的分支，可以通过 git branch -D feature-vulcan 强行删除
	新建了一个分支，需要将改分支推送到远程仓库中


9  
查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
	
10
 命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

命令git tag可以查看所有标签。

git reset

	 
	 
	 
	
	  
	  
	
	

   	
	
    
  
  
  
  
				   
